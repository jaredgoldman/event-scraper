// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  role      String   @default("ADMIN")
}

model Artist {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String   @unique
  genre           Genre?
  photoPath       String?
  photoName       String?
  instagramHandle String?
  featured        Boolean  @default(false)
  website         String?
  events          Event[]
  active          Boolean  @default(true)
  description     String?
  approved        Boolean  @default(false)

  @@index([featured, name])
}

model Venue {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  address         String
  city            String
  photoPath       String?
  photoName       String?
  featured        Boolean  @default(false)
  instagramHandle String?
  facebookLink    String?
  website         String
  phoneNumber     String
  events          Event[]
  active          Boolean  @default(true)
  latitude        Float
  longitude       Float
  crawlable       Boolean  @default(false)
  eventsPath      String?
  description     String?
  approved        Boolean  @default(false)

  @@index([featured])
}

model Event {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String
  startDate         DateTime
  endDate           DateTime
  artistId          String
  venueId           String
  artist            Artist   @relation(fields: [artistId], references: [id])
  venue             Venue    @relation(fields: [venueId], references: [id])
  featured          Boolean  @default(false)
  instagramHandle   String?
  website           String?
  cancelled         Boolean  @default(false)
  description       String?
  conflict          Boolean  @default(false)
  approved          Boolean  @default(false)
  conflictEventId   String?
  conflictEvent     Event?   @relation(name: "ConflictEvent", fields: [conflictEventId], references: [id])
  conflictingEvents Event[]  @relation(name: "ConflictEvent")

  @@unique([startDate, venueId])
  @@index([featured, name])
}

enum Genre {
  JAZZ
  BLUES
  FUNK
  SOUL
  ROCK
  POP
  HIPHOP
  RNB
  COUNTRY
  CLASSICAL
  ELECTRONIC
  INDIE
  OTHER
}

// NextAuth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
